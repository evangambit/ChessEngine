import subprocess
import re

import chess

import unittest

def get_features(fen):
  command = ["./a.out", "mode", "printvec", "fen", *fen.split(' '), "makequiet", "0"]
  lines = subprocess.check_output(command).decode().strip().split('\n')
  assert lines[0].startswith('ORIGINAL_FEN ')
  assert lines[1].startswith('FEN ')
  assert lines[2].startswith('SCORE ')
  lines = lines[3:]
  r = {}
  for line in lines:
    assert re.match(r"^-?\d+ +-?\d+ \w+$", line), line
    parts = re.split(r" +", line)
    assert len(parts) == 3
    r[parts[2]] = int(parts[0])
  return r

class EvalTest(unittest.TestCase):
  def test_pawns1(self):
    x = get_features('k7/pppppppp/8/8/8/8/PPPPPPPP/7K w - - 0 1')
    self.assertEqual(x["OUR_PASSED_PAWNS"], 0)
    self.assertEqual(x["THEIR_PASSED_PAWNS"], 0)
    self.assertEqual(x["ISOLATED_PAWNS"], 0)
    self.assertEqual(x["DOUBLED_PAWNS"], 0)
    self.assertEqual(x["DOUBLE_ISOLATED_PAWNS"], 0)
    self.assertEqual(x["PAWNS_CENTER_16"], 0)
    self.assertEqual(x["PAWNS_CENTER_4"], 0)
    self.assertEqual(x["ADVANCED_PASSED_PAWNS_2"], 0)
    self.assertEqual(x["ADVANCED_PASSED_PAWNS_3"], 0)
    self.assertEqual(x["ADVANCED_PASSED_PAWNS_4"], 0)
    self.assertEqual(x["PAWN_MINOR_CAPTURES"], 0)
    self.assertEqual(x["PAWN_MAJOR_CAPTURES"], 0)
    self.assertEqual(x["PROTECTED_PAWNS"], 0)
    self.assertEqual(x["PROTECTED_PASSED_PAWNS"], 0)

  def test_rooks1(self):
    x = get_features('1k3rr1/8/8/6p1/8/5P2/1P6/KR1R4 w - - 0 1')
    self.assertEqual(x["OUR_PAWNS"], 2)
    self.assertEqual(x["OUR_KNIGHTS"], 0)
    self.assertEqual(x["OUR_BISHOPS"], 0)
    self.assertEqual(x["OUR_ROOKS"], 2)
    self.assertEqual(x["OUR_QUEENS"], 0)
    self.assertEqual(x["THEIR_PAWNS"], 1)
    self.assertEqual(x["THEIR_KNIGHTS"], 0)
    self.assertEqual(x["THEIR_BISHOPS"], 0)
    self.assertEqual(x["THEIR_ROOKS"], 2)
    self.assertEqual(x["THEIR_QUEENS"], 0)
    self.assertEqual(x["IN_CHECK"], 0)
    self.assertEqual(x["KING_ON_BACK_RANK"], 0)
    self.assertEqual(x["KING_ON_CENTER_FILE"], 0)
    self.assertEqual(x["KING_ACTIVE"], 0)
    self.assertEqual(x["THREATS_NEAR_KING_2"], -2)
    self.assertEqual(x["THREATS_NEAR_KING_3"], -2)
    self.assertEqual(x["OUR_PASSED_PAWNS"], 1)
    self.assertEqual(x["THEIR_PASSED_PAWNS"], 0)
    self.assertEqual(x["ISOLATED_PAWNS"], 1)
    self.assertEqual(x["DOUBLED_PAWNS"], 0)
    self.assertEqual(x["DOUBLE_ISOLATED_PAWNS"], 0)
    self.assertEqual(x["PAWNS_CENTER_16"], 1)
    self.assertEqual(x["PAWNS_CENTER_4"], 0)
    self.assertEqual(x["ADVANCED_PASSED_PAWNS_2"], 0)
    self.assertEqual(x["ADVANCED_PASSED_PAWNS_3"], 0)
    self.assertEqual(x["ADVANCED_PASSED_PAWNS_4"], 0)
    self.assertEqual(x["PAWN_MINOR_CAPTURES"], 0)
    self.assertEqual(x["PAWN_MAJOR_CAPTURES"], 0)
    self.assertEqual(x["PROTECTED_PAWNS"], 0)
    self.assertEqual(x["PROTECTED_PASSED_PAWNS"], 0)
    self.assertEqual(x["BISHOPS_DEVELOPED"], 0)
    self.assertEqual(x["BISHOP_PAIR"], 0)
    self.assertEqual(x["BLOCKADED_BISHOPS"], 0)
    self.assertEqual(x["SCARY_BISHOPS"], 0)
    self.assertEqual(x["SCARIER_BISHOPS"], 0)
    self.assertEqual(x["BLOCKADED_ROOKS"], 0)
    self.assertEqual(x["SCARY_ROOKS"], 0)
    self.assertEqual(x["INFILTRATING_ROOKS"], 0)
    self.assertEqual(x["KNIGHTS_DEVELOPED"], 0)
    self.assertEqual(x["KNIGHT_MAJOR_CAPTURES"], 0)
    self.assertEqual(x["KNIGHTS_CENTER_16"], 0)
    self.assertEqual(x["KNIGHTS_CENTER_4"], 0)
    self.assertEqual(x["KNIGHT_ON_ENEMY_SIDE"], 0)
    self.assertEqual(x["OUR_HANGING_PAWNS"], 1)
    self.assertEqual(x["OUR_HANGING_KNIGHTS"], 0)
    self.assertEqual(x["OUR_HANGING_BISHOPS"], 0)
    self.assertEqual(x["OUR_HANGING_ROOKS"], 0)
    self.assertEqual(x["OUR_HANGING_QUEENS"], 0)
    self.assertEqual(x["THEIR_HANGING_PAWNS"], 0)
    self.assertEqual(x["THEIR_HANGING_KNIGHTS"], 0)
    self.assertEqual(x["THEIR_HANGING_BISHOPS"], 0)
    self.assertEqual(x["THEIR_HANGING_ROOKS"], 0)
    self.assertEqual(x["THEIR_HANGING_QUEENS"], 0)
    self.assertEqual(x["LONELY_KING_IN_CENTER"], 0)
    self.assertEqual(x["LONELY_KING_AWAY_FROM_ENEMY_KING"], 0)
    # self.assertEqual(x["NUM_TARGET_SQUARES"], 0)
    self.assertEqual(x["TIME"], 4)
    # self.assertEqual(x["PAWN_PM"], 0)
    # self.assertEqual(x["KNIGHT_PM"], 0)
    # self.assertEqual(x["BISHOP_PM"], 0)
    # self.assertEqual(x["ROOK_PM"], 0)
    # self.assertEqual(x["QUEEN_PM"], 0)
    # self.assertEqual(x["KING_PM"], 0)
    self.assertEqual(x["KPVK_OPPOSITION"], 0)
    self.assertEqual(x["KPVK_IN_FRONT_OF_PAWN"], 0)
    self.assertEqual(x["KPVK_OFFENSIVE_KEY_SQUARES"], 0)
    self.assertEqual(x["KPVK_DEFENSIVE_KEY_SQUARES"], 0)
    self.assertEqual(x["SQUARE_RULE"], 0)
    self.assertEqual(x["ADVANCED_PAWNS_1"], 0)
    self.assertEqual(x["ADVANCED_PAWNS_2"], 0)
    self.assertEqual(x["OPEN_ROOKS"], 1)
    self.assertEqual(x["ROOKS_ON_THEIR_SIDE"], 0)
    self.assertEqual(x["KING_CASTLED"], -1)
    self.assertEqual(x["CASTLING_RIGHTS"], 0)


  def test_pawns1(self):
    board = chess.Board('k7/p7/p7/8/8/8/P6P/7K w - - 0 1')
    x = get_features(board.fen())
    self.assertEqual(x["OUR_PASSED_PAWNS"], 1)
    self.assertEqual(x["THEIR_PASSED_PAWNS"], 0)
    self.assertEqual(x["ISOLATED_PAWNS"], 0)  # two each
    self.assertEqual(x["DOUBLED_PAWNS"], -1)
    self.assertEqual(x["DOUBLE_ISOLATED_PAWNS"], -1)
    self.assertEqual(x["PAWNS_CENTER_16"], 0)
    self.assertEqual(x["PAWNS_CENTER_4"], 0)
    self.assertEqual(x["ADVANCED_PASSED_PAWNS_2"], 0)
    self.assertEqual(x["ADVANCED_PASSED_PAWNS_3"], 0)
    self.assertEqual(x["ADVANCED_PASSED_PAWNS_4"], 0)
    self.assertEqual(x["PAWN_MINOR_CAPTURES"], 0)
    self.assertEqual(x["PAWN_MAJOR_CAPTURES"], 0)
    self.assertEqual(x["PROTECTED_PAWNS"], 0)
    self.assertEqual(x["PROTECTED_PASSED_PAWNS"], 0)

  def test_initial_fen(self):
    x = get_features("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1")
    self.assertEqual(x["OUR_PAWNS"], 8)
    self.assertEqual(x["OUR_KNIGHTS"], 2)
    self.assertEqual(x["OUR_BISHOPS"], 2)
    self.assertEqual(x["OUR_ROOKS"], 2)
    self.assertEqual(x["OUR_QUEENS"], 1)
    self.assertEqual(x["THEIR_PAWNS"], 8)
    self.assertEqual(x["THEIR_KNIGHTS"], 2)
    self.assertEqual(x["THEIR_BISHOPS"], 2)
    self.assertEqual(x["THEIR_ROOKS"], 2)
    self.assertEqual(x["THEIR_QUEENS"], 1)
    self.assertEqual(x["IN_CHECK"], 0)
    self.assertEqual(x["KING_ON_BACK_RANK"], 0)
    self.assertEqual(x["KING_ON_CENTER_FILE"], 0)
    self.assertEqual(x["KING_ACTIVE"], 0)
    self.assertEqual(x["THREATS_NEAR_KING_2"], 0)
    self.assertEqual(x["THREATS_NEAR_KING_3"], 0)
    self.assertEqual(x["OUR_PASSED_PAWNS"], 0)
    self.assertEqual(x["THEIR_PASSED_PAWNS"], 0)
    self.assertEqual(x["ISOLATED_PAWNS"], 0)
    self.assertEqual(x["DOUBLED_PAWNS"], 0)
    self.assertEqual(x["DOUBLE_ISOLATED_PAWNS"], 0)
    self.assertEqual(x["PAWNS_CENTER_16"], 0)
    self.assertEqual(x["PAWNS_CENTER_4"], 0)
    self.assertEqual(x["ADVANCED_PASSED_PAWNS_2"], 0)
    self.assertEqual(x["ADVANCED_PASSED_PAWNS_3"], 0)
    self.assertEqual(x["ADVANCED_PASSED_PAWNS_4"], 0)
    self.assertEqual(x["PAWN_MINOR_CAPTURES"], 0)
    self.assertEqual(x["PAWN_MAJOR_CAPTURES"], 0)
    self.assertEqual(x["PROTECTED_PAWNS"], 0)
    self.assertEqual(x["PROTECTED_PASSED_PAWNS"], 0)
    self.assertEqual(x["BISHOPS_DEVELOPED"], 0)
    self.assertEqual(x["BISHOP_PAIR"], 0)
    self.assertEqual(x["BLOCKADED_BISHOPS"], 0)
    self.assertEqual(x["SCARY_BISHOPS"], 0)
    self.assertEqual(x["SCARIER_BISHOPS"], 0)
    self.assertEqual(x["BLOCKADED_ROOKS"], 0)
    self.assertEqual(x["SCARY_ROOKS"], 0)
    self.assertEqual(x["INFILTRATING_ROOKS"], 0)
    self.assertEqual(x["KNIGHTS_DEVELOPED"], 0)
    self.assertEqual(x["KNIGHT_MAJOR_CAPTURES"], 0)
    self.assertEqual(x["KNIGHTS_CENTER_16"], 0)
    self.assertEqual(x["KNIGHTS_CENTER_4"], 0)
    self.assertEqual(x["KNIGHT_ON_ENEMY_SIDE"], 0)
    self.assertEqual(x["OUR_HANGING_PAWNS"], 0)
    self.assertEqual(x["OUR_HANGING_KNIGHTS"], 0)
    self.assertEqual(x["OUR_HANGING_BISHOPS"], 0)
    self.assertEqual(x["OUR_HANGING_ROOKS"], 0)
    self.assertEqual(x["OUR_HANGING_QUEENS"], 0)
    self.assertEqual(x["THEIR_HANGING_PAWNS"], 0)
    self.assertEqual(x["THEIR_HANGING_KNIGHTS"], 0)
    self.assertEqual(x["THEIR_HANGING_BISHOPS"], 0)
    self.assertEqual(x["THEIR_HANGING_ROOKS"], 0)
    self.assertEqual(x["THEIR_HANGING_QUEENS"], 0)
    self.assertEqual(x["LONELY_KING_IN_CENTER"], 0)
    self.assertEqual(x["LONELY_KING_AWAY_FROM_ENEMY_KING"], 0)
    # self.assertEqual(x["NUM_TARGET_SQUARES"], 0)
    self.assertEqual(x["TIME"], 16)
    # self.assertEqual(x["PAWN_PM"], 0)
    # self.assertEqual(x["KNIGHT_PM"], 0)
    # self.assertEqual(x["BISHOP_PM"], 0)
    # self.assertEqual(x["ROOK_PM"], 0)
    # self.assertEqual(x["QUEEN_PM"], 0)
    # self.assertEqual(x["KING_PM"], 0)
    self.assertEqual(x["KPVK_OPPOSITION"], 0)
    self.assertEqual(x["KPVK_IN_FRONT_OF_PAWN"], 0)
    self.assertEqual(x["KPVK_OFFENSIVE_KEY_SQUARES"], 0)
    self.assertEqual(x["KPVK_DEFENSIVE_KEY_SQUARES"], 0)
    self.assertEqual(x["SQUARE_RULE"], 0)
    self.assertEqual(x["ADVANCED_PAWNS_1"], 0)
    self.assertEqual(x["ADVANCED_PAWNS_2"], 0)
    self.assertEqual(x["OPEN_ROOKS"], 0)
    self.assertEqual(x["ROOKS_ON_THEIR_SIDE"], 0)
    self.assertEqual(x["KING_CASTLED"], 0)
    self.assertEqual(x["CASTLING_RIGHTS"], 0)
