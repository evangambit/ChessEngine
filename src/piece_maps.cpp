#include "piece_maps.h"

#include <cassert>

namespace ChessEngine {

namespace {
const int32_t kEarlyPieceMap[13*64] = {
  // NO_COLORED_PIECE
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
// Early White P
   0,   0,   0,   0,   0,   0,   0,   0,
   2,   1,   1,   0,  -1,   0,  -1,  -4,
  -8,  -5,  -3,  -5,   4,  14,   4,  -5,
  10,  13,   2,  -5,   4,  28,  28,  24,
   4, -12,  -3, -11,  -9,   6,  -4,  11,
  -6,  -7,  -6, -16,  -4,  -5,  16,   9,
  -8,  -5, -13, -21, -16,  16,  15,  12,
   0,   0,   0,   0,   0,   0,   0,   0,
// Early White N
  -4,   0,  -2,   0,   0,   0,  -1,   0,
  -2,   0,  -2,  -4,   1,   1,  -1,   0,
   1,  -1, -10,  12,   8,   5,   3,   2,
   2,  11,   2,  17,   3,  15,  11,   9,
  -2,   2,  15,  -2,  17,   6,   4,  -1,
  -4,   7,   3,   3,  10,   5,  21,  -8,
  -6,   0,  -3,   8,   7,   4,  -2,  -1,
  -2,   3,  -8,  -8,   0,  -8,   4,  -2,
// Early White B
   2,  -1,  -2,   0,  -2,  -1,  -2,   0,
  -2,  16,   5,  -2,   1,   3,   4,  -5,
  -8,   4,   3,  10,   8,  11,   5,  11,
   2,   1,   5,  -3,  18,   4,   7,  -1,
   1,   2,  -7,   9,   4,   2,  -4,   3,
   0,   5,   4,   6,  13,  -8,   6,   7,
  -4,  12,  13,  -1,  -1,   8,   5,   1,
   2,  11,  12, -10,  -5,   0,   0,  -5,
// Early White R
   0,  -1,   0,   1,   0,   0,   0,   0,
  -2,   1,   4,   4,   4,   2,   2,   1,
   0,   3,   1,  -1,   5,   5,   3,   1,
  -4,  -2,  -1,  -2,  -2,   2,   2,   1,
  -5,  -1,  -3,  -3,   2,   3,   4,   1,
 -12,   1,  -1,  -1,   2,   8,  15,   2,
 -16,  -4,  -5,  -4,  -8,   5,   1, -10,
   4,   8,   5,  12,  18,  15,  -4,  12,
// Early White Q
  -3,   0,   0,  -1,   1,   0,   1,   0,
  -4,  -2,   1,  -1,   1,   7,   3,  10,
  -4,   0,   1,   1,   6,  11,  12,  18,
  -4,  -6,   1,  -1,   7,   8,   8,   9,
   0,   1,  -3,  -4,   4,   5,   9,  17,
  -4,   0,   4,  -3,   1,   8,  14,   7,
  -4,   0,  10,   8,  10,  13,   0,   0,
  -4, -13,  -3,   3,  -2,  -6,  -1,  -1,
// Early White K
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   1,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  -1,
   0,   0,  -1,   0,  -1,   1,  -2,  -2,
   0,   0,   0,  -3,  -3,  -7,  -2,  -7,
   2,   4,  -1,  -2,  -6,   5,  35,  42,
  -1,  16,   2, -14,  13,  -9,   9,  19,
// Early BlackP
   0,   0,   0,   0,   0,   0,   0,   0,
  15,  15,  13,  21,  12, -26, -27, -20,
  13,  14,   6,  11,  -2,   9, -27, -17,
   6,  16,   3,  13,  12,  -7,  11, -11,
 -12,  -1,   3,   6, -11, -33, -22, -20,
  12,   4,   3,   2,   2, -10,  -4,   3,
  -2,  -1,  -1,   1,   0,   0,   2,   1,
   0,   0,   0,   0,   0,   0,   0,   0,
// Early BlackN
   1,  -3,   6,   4,  -1,   5,  -6,   2,
   1,   2,   1,  -8, -11,  -7,  -5,  -5,
   9,  -3,   0,  -6, -10,  -4, -22,   5,
  -2,  -3,  -9,  -4, -12, -16,  -3,  -4,
   0,  -3,  -1,  -5,   2, -15,  -6,  -8,
   1,   4,   5,  -2,  -2,  -3,  -4,   0,
   2,   2,   3,   3,   0,  -2,   2,   1,
   4,   1,   1,   1,   0,   1,   0,   2,
// Early BlackB
   6,  -3,  -2,   0,   7,  -4,   0,   2,
   2,  -5,  -8,  10,  -4,  -8, -11,  -3,
   4,  -3,   5,  -4,   4,   2,  -8, -13,
   0,   2,   7,  -2,  -8,   0,   0,  -1,
   3,  -6,  -5,  -5,  -7,  -7,  -6,   6,
   2,   0,  -1,  -2,  -1,  -6,  -5,  -9,
   1, -13,   1,  -1,   0,   1,  -4,   3,
  -1,   3,   3,   2,   2,   1,   0,   0,
// Early BlackR
   0,  -3,   3,  -8, -11, -13,  10,  -9,
  23,   2,   7,   4,   6, -12,  -5,   7,
  12,   2,   8,   4,   4,   1,  -9,   0,
   6,   4,   3,  -1,  -2,   1,  -1,   0,
   4,   0,   3,  -2,  -3,  -4,  -2,  -1,
   1,  -1,  -2,   0,  -1,  -1,  -2,  -1,
   0,  -1,  -2,  -2,  -2,  -1,  -1,  -1,
   0,   1,   1,   2,   0,   0,   0,   0,
// Early BlackQ
   7,  15,   5,  -2,   2,  11,   1,   1,
   8,   0,  -9,   3,  -7,  -6,   1,   0,
   3,  -4,  -1,   8,   3,  -1, -13,  -6,
  -4,  -5,   5,  -1,  -8,  -7,  -8,  -7,
   2,  -1,  -2,  -4,  -2, -11,  -5, -16,
   3,   0,   0,  -2,  -6,  -6,  -6, -13,
   3,   6,   0,   1,   0,  -7,   0,  -4,
   4,   2,   0,   0,   1,   1,   0,  -1,
// Early BlackK
   0,  -7,   2,  24, -11,  20,  -3, -10,
  -2,  -1,   0,   5,   5,  -1, -31, -31,
   0,   0,   2,   0,   5,   8,   7,   5,
   1,   1,   0,   0,   0,   0,   1,   3,
   0,   0,   0,   0,  -1,  -1,   0,   0,
   0,   0,   0,  -1,   0,  -1,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
};

const int32_t kLatePieceMap[13*64] = {
  // NO_COLORED_PIECE
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
// Late White P
   0,   0,   0,   0,   0,   0,   0,   0,
   4,   2,   2,  -2,  -2,  -3,  -2,   0,
  15,   6,   0,  -8, -13,  -1,  -6,   1,
  14,   6,   9,   0,   4,   0,  -7,   0,
  -1,   1,  -4,   6,   6,   1,  -2,  -6,
  -3,  -5,   2,   4,  10,   9,  -5, -11,
   1,  -1,   6,  -5,  13,   2,   0,  -8,
   0,   0,   0,   0,   0,   0,   0,   0,
// Late White N
  -3,   0,  -2,   0,   0,  -1,   0,  -2,
   0,   2,  -2,   0,   0,  -1,  -1,   0,
   1,  -1,  -1,  -1,   0,   1,   0,   0,
   2,   2,   2,   2,  -2,   7,  13,   5,
   6,   1,   7,  -3,  -5,  -2,   2,   6,
  -2,  -3, -16,   5,   6, -16, -20,   4,
  -2,   0,  -2,  -6, -12,   0,   2,  -1,
  -1,  -7,   0,   1,   2,   0,  -5,  -1,
// Late White B
   0,  -1,  -1,   3,  -1,  -1,  -2,   1,
   2,   2,   2,  -1,   1,   0,   0,  -2,
   3,   3,   0,   1,   0,   5,   0,   8,
   4,  14,   3,  -1,   3,   0,  12,   1,
   1,   1,  -2,  -4,  -3,  -1,   0,  -2,
  -2,  -1,   3,   1,   2,   0,  -5,   0,
  -3, -12,   3,   2,   2,   3,  -8,  -4,
  -2,   2,  -7,   2,   3,   5,  -1,  -4,
// Late White R
   0,   2,   0,   0,  -2,  -1,   0,  -2,
   3,   5,   4,   2,   2,   3,   1,  -2,
   2,   4,   3,  -2,   1,   4,   3,  -1,
   2,   0,   3,  -3,  -2,   2,  -1,  -2,
  -1,   3,   2,   3,   3,   4,   5,   2,
   3,   7,   1,   0,  -5,   0,   5,  -1,
   0,   1,   1,  -2,  -3,  -5,   1,  -1,
  -4,  -1,   6,  -1,  -5,  -3,   6, -17,
// Late White Q
  -2,   1,   1,  -1,   2,   1,   1,   0,
   0,  -1,   1,   1,   2,   6,   0,   4,
  -3,   1,   1,   1,   4,   6,   6,   8,
   0,   2,   1,   3,   5,   7,   7,  10,
   2,   3,   5,  13,   7,   9,  10,   7,
  -2,   1,   7,   5,   5,   9,   7,   4,
  -1,   2, -10,  -3,  -4,   1,  -1,   1,
  -1,  -2,   2,   2,   1,  -2,   0,  -1,
// Late White K
   0,   0,  -1,   0,   0,   0,   0,   0,
  -1,   0,   1,   1,   0,   1,   1,  -1,
   0,   1,   2,   2,   3,   2,   3,  -2,
  -1,   1,   4,   1,   2,   4,   0,  -3,
  -2,  -1,   1,   3,  -3,   2,  -6,  -9,
  -3,   0,   2,   6,   6,  13,   0, -10,
  -3,  -3,   2,  -5,  -3,   1,  -8, -25,
  -2,  -4,   2,   0,   1,  19,  -5, -15,
// Late BlackP
   0,   0,   0,   0,   0,   0,   0,   0,
  -5,  -3,  -6,   2,  -3,   1,   2,  11,
   4,   3,  -1,  -3,  -5,  -9,   8,  12,
  -5,   2,   9,  -8,  -9,  -1,  -1,   6,
 -10,   3,  -3,   2,   0,   3,   2,  -1,
  -9,  -2,  -2,  10,   8,   1,   1,  -2,
  -2,  -1,  -1,   2,   2,   0,   0,   1,
   0,   0,   0,   0,   0,   0,   0,   0,
// Late BlackN
   1,   6,   1,  -5,  -3,  -3,  -7,   1,
  -1,  -1,   4,   7,   5,  -1,  -1,  -2,
  -1,   7,  11,   0,  -5,   7,   5,  -5,
  -3,   0,  -8,   4,   0,  -5,  -3,  -2,
  -3,  -4,  -1,  -4,   1,  -7,  -8,  -7,
  -1,   1,   2,   0,  -1,  -2,   0,   2,
   0,   1,   1,   1,   0,   2,   1,   1,
   3,   0,   1,   1,   0,   1,   0,   2,
// Late BlackB
   4,   0,   8,  -4,   0,  -6,  -1,   2,
   1,  15,  -4,  -3,  -7,  -1,   7,   3,
   1,  -5,  -3,  -5, -11,   0,   4,  -3,
  -2,  -2,  -8,   1,  -2,   0,   2,   1,
  -2, -14,  -3,   0,  -2,  -2,  -4,   0,
  -3,   0,   1,   1,   0,  -3,  -4,  -3,
   0,  -5,  -2,   0,   2,   1,   2,   0,
   1,   0,   1,   2,   0,   0,  -1,   0,
// Late BlackR
   1,  -1,  -9,  -2,   2,   0, -10,  18,
  -2,   0,   0,   2,   5,   6,   2,   2,
  -3,  -2,  -2,   0,   2,   2,  -2,   0,
  -6,  -2,  -4,  -6,  -2,  -6,  -2,   0,
  -3,  -1,   0,  -2,   2,  -3,  -2,   1,
   0,  -1,  -1,  -1,   2,  -1,  -2,   0,
   0,  -7,  -5,  -5,   0,  -1,   1,   2,
   1,   2,   1,   1,   1,   0,  -1,   0,
// Late BlackQ
   2,   1,  -1,  -3,  -2,   5,   0,   1,
   2,  -2,   8, -13,  -7,   1,   1,   0,
   2,   5,  -7, -12,  -6, -10,  -6,  -4,
  10,  -4,  -5, -13,  -8,  -6,  -2,  -5,
  -1,  -5,   0,  -3,  -6,  -7,  -4,  -7,
   0,   0,  -2,  -2,  -6,  -6,  -3,  -6,
   2,   1,  -2,  -1,  -1,  -5,   0,  -2,
   3,   1,   0,  -1,   0,   0,  -1,  -1,
// Late BlackK
   3,   3,  -3,  -2,   5, -21,   3,  16,
   4,   6,  -6,   3,  -1,  -2,   7,  20,
   3,  -2,  -9,  -4,  -9, -11,   2,   9,
   3,   3,   0,   2,   3,  -4,   5,   8,
   2,   1,  -2,  -3,  -3,  -4,  -1,   3,
   0,  -2,  -2,  -1,  -1,  -3,  -3,   1,
   0,  -1,   0,   0,   0,  -1,  -1,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
};

}  // namespace

int32_t early_piece_map(ColoredPiece cp, Square sq) {
	assert(cp >= 0);
	assert(cp < 13);
	assert(sq >= 0);
	assert(sq < 64);
    return kEarlyPieceMap[cp * 64 + sq];
}

int32_t late_piece_map(ColoredPiece cp, Square sq) {
	assert(cp >= 0);
	assert(cp < 13);
	assert(sq >= 0);
	assert(sq < 64);
    return kLatePieceMap[cp * 64 + sq];
}

}  // namespace ChessEngine