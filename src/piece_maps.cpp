#include "piece_maps.h"

#include <cassert>

namespace ChessEngine {

namespace {
const int32_t kEarlyPieceMap[13*64] = {
  // NO_COLORED_PIECE
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
// Early White P
   0,   0,   0,   0,   0,   0,   0,   0,
   3,   2,   1,   0,  -1,  -1,  -1,  -2,
  -7,  -4,   3,  -1,   7,  13,   4,  -9,
   3,   9,   3,   1,  10,  30,  25,  19,
  -3, -11,   0,  -7,  -5,   7,  -2,   3,
  -9,  -9,  -8, -10,  -2,  -3,  14,   5,
  -6,  -7, -12, -16,  -9,  17,  13,  10,
   0,   0,   0,   0,   0,   0,   0,   0,
// Early White N
  -6,   0,   0,  -1,  -1,   0,  -1,  -1,
  -3,   0,  -2,  -3,   2,   4,  -1,   0,
   0,  -1,  -8,   9,   8,   5,   4,   1,
   0,   7,   0,  13,   2,  13,  11,   6,
  -6,   5,  14,  -2,  15,   8,  10,  -5,
 -12,   9,   3,   0,  10,   3,  23, -15,
 -11,  -1,  -3,  10,  11,   6,  -3,  -8,
  -4,   2,  -8,  -8,   2, -12,   2,  -3,
// Early White B
   3,  -1,  -1,   1,  -1,   0,  -1,   1,
  -3,   1,   1,  -2,   0,   1,  -2,  -8,
  -1,   1,  -3,   7,   9,   9,   6,  12,
   0,   3,   5,   3,  13,   4,   6,   1,
   2,   2,   0,  11,   7,   2,  -4,   2,
  -6,  10,   6,   9,  13,  -4,   3,   2,
   1,  12,  14,   2,   3,   6,   8,   0,
   0,  14,  15,  -7,  -5,  -1,   0,  -6,
// Early White R
   2,   0,   2,   2,   2,  -1,   0,   1,
   2,   4,   5,   5,   5,   4,   2,   3,
   1,   3,   5,   1,   9,   5,   4,   2,
  -4,  -2,   1,  -2,   0,   2,   2,   1,
  -3,   1,  -1,   0,   2,   3,   4,   3,
  -8,   1,  -1,  -1,   5,   5,  15,   4,
 -14,  -1,  -3,  -3,  -4,   3,   1,  -8,
   2,   6,   5,  13,  20,  13,  -1,  13,
// Early White Q
  -1,  -1,   1,  -1,   1,   1,   1,   2,
  -2,  -2,   2,   0,   2,   5,   1,   9,
   0,  -2,   1,   4,   8,  13,  12,  23,
  -3,  -4,   2,   3,   8,   9,  10,  11,
   2,  -1,  -1,  -2,   5,   3,   7,  18,
  -3,   3,   4,  -2,   4,   8,  18,  11,
  -1,   5,  11,   5,  12,  11,   4,   1,
  -4, -10,  -2,   7,  -1,  -5,  -2,  -1,
// Early White K
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  -1,
  -1,   0,   0,  -1,  -1,   1,  -3,  -3,
   0,   1,  -1,  -1,  -3,  -5,   0,  -7,
   5,   5,   0,  -7,   0,   3,  37,  38,
  -1,  19,  -2, -16,  16, -11,  11,  21,
// Early BlackP
   0,   0,   0,   0,   0,   0,   0,   0,
  11,  16,  13,  14,   5, -24, -23, -17,
  14,  16,   7,   6,  -2,   9, -23, -11,
  12,  14,   1,   8,   6,  -6,   9,  -3,
  -5,   2,   1,  -2, -14, -29, -15, -14,
  10,   1,  -1,   1,  -3, -10,  -6,   4,
  -3,  -2,  -1,  -1,   0,   0,   2,   1,
   0,   0,   0,   0,   0,   0,   0,   0,
// Early BlackN
   3,  -3,   6,   7,  -5,   9,  -6,   3,
   9,   3,  -1, -10, -14,  -9,  -2,   0,
  15,  -6,   0,  -4, -10,  -1, -26,  11,
   3,  -3,  -8,  -6, -12, -18,  -5,   1,
   3,   0,   0,  -4,   0,  -9,  -7,  -6,
   2,   0,   4,  -2,  -2,  -3,  -4,  -1,
   3,   3,   2,   1,  -1,  -3,   1,   1,
   5,   1,   1,   0,   0,   0,   0,   2,
// Early BlackB
   6,  -3,  -8,   0,   5,  -4,   1,  -1,
  -1,  -8,  -8,   5,  -6,  -9, -17,  -1,
   8,  -4,   1,  -6,   0,   0,  -8,  -6,
   2,   3,  -1,  -5, -11,   0,   2,   3,
   4,  -8,  -3,  -8,  -6,  -5,  -3,   5,
  -5,   2,   4,  -3,  -3,  -6,  -4,  -9,
   3,   1,   1,   0,   0,   2,   7,   4,
  -3,   3,   1,   0,   1,  -1,   0,   0,
// Early BlackR
   2,  -2,   3, -11, -14, -12,   6, -10,
  19,   3,   4,   1,   2, -11,  -4,   8,
   9,   1,   6,   3,   0,   0, -10,  -2,
   4,   1,   1,  -2,  -3,   0,  -2,   2,
   2,   1,   1,  -2,  -5,  -4,  -2,   0,
  -1,  -3,  -4,  -2,  -2,  -3,  -2,  -2,
  -2,  -4,  -5,  -5,  -3,  -3,  -1,  -1,
  -1,   0,   1,   1,  -1,   0,   0,  -1,
// Early BlackQ
   3,  10,   2,  -8,  -1,   9,   1,   1,
   2,  -3, -13,   1, -11,  -7,  -1,  -1,
   2,  -5,  -1,   6,  -2,  -1, -12,  -5,
  -4,  -4,   3,   4,  -7,  -5,  -4,  -9,
  -1,  -6,  -2,  -5,  -3, -12,  -5, -19,
   0,  -1,  -2,  -3,  -7,  -7,  -6, -15,
   4,   6,   0,  -1,   0,  -7,   0,  -2,
   1,   2,   0,   0,   1,   1,  -1,  -2,
// Early BlackK
   1,  -7,   6,  26, -12,  18,  -7, -13,
  -1,  -3,   3,  11,  -2,   0, -34, -30,
   0,   0,   2,   1,   2,   7,   5,   5,
   1,   1,   0,   0,   0,   1,   2,   3,
   0,   0,   0,  -1,  -1,  -1,   0,   1,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
};

const int32_t kLatePieceMap[13*64] = {
  // NO_COLORED_PIECE
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
// Late White P
   0,   0,   0,   0,   0,   0,   0,   0,
   5,   4,   1,  -1,  -4,  -3,  -1,   1,
  16,   6,   2, -11, -15,   0,  -4,   1,
  15,   6,   9,  -2,   2,  -2,  -6,   0,
   1,   2,  -5,   4,   6,   0,  -3,  -5,
  -3,  -3,   2,   4,   8,   9,  -6, -11,
  -1,   0,   6,  -4,  14,   3,   0,  -9,
   0,   0,   0,   0,   0,   0,   0,   0,
// Late White N
  -6,  -1,  -2,   0,   0,   0,   0,  -3,
  -2,   2,   1,   4,   4,   2,  -1,  -1,
   0,   4,  -2,  -1,  -1,   1,   3,  -1,
  -2,   8,   1,   2,   0,   7,  20,   1,
  -1,   3,   8,  -1,  -4,  -2,   5,   2,
  -6,   4, -13,   7,   6, -10,  -8,   2,
  -5,   0,   3,   7,  -1,   4,   0,  -6,
  -2,  -6,  -1,  -4,  -1,  -1,  -3,  -3,
// Late White B
  -1,  -1,   0,   2,  -1,   0,  -2,   0,
   2,  -2,  -1,  -1,  -1,  -1,   1,  -2,
   3,   0,  -2,  -1,  -2,   3,   0,   4,
   3,  12,   2,   1,   1,   0,  10,   1,
   1,   0,   0,  -1,  -3,  -2,  -1,  -4,
  -3,  -1,   3,   3,   4,   2,  -6,  -1,
  -4, -13,   0,   3,   3,   1,  -3,  -4,
  -3,   1, -12,   4,   3,   3,   0,  -3,
// Late White R
   2,   3,   2,   1,   1,   0,   1,   1,
   4,   7,   5,   3,   3,   3,   2,   1,
   3,   3,   4,   0,   2,   3,   3,  -1,
   2,   0,   4,  -2,   0,   1,   0,  -1,
   2,   3,   5,   2,   2,   5,   3,   3,
   3,   5,   1,   2,  -4,   2,   3,  -3,
   1,   2,   2,   0,   0,  -2,   2,  -2,
  -2,   2,   8,  -2,  -5,   2,   6, -19,
// Late White Q
  -2,  -1,   1,  -1,   2,   1,   1,   0,
  -1,  -1,   2,   0,   2,   5,   0,   3,
  -2,   0,   1,   2,   6,   7,   5,   8,
  -2,   2,   2,   7,   8,   7,  10,  12,
   2,  -1,   7,  16,  10,   9,   9,   6,
  -1,   4,   9,  14,  10,  15,   5,   3,
   1,   3,  -7,   4,   0,   0,   0,   0,
   1,   0,   4,  -6,   2,  -1,  -1,   0,
// Late White K
   0,  -1,   0,   0,   0,  -1,   0,   0,
  -1,   0,   1,   0,   1,   1,   1,  -1,
   0,   1,   3,   2,   2,   4,   1,  -2,
  -2,   0,   3,   0,   2,   4,   2,  -4,
  -3,  -3,   2,   2,  -3,   4,  -7, -11,
  -2,   0,   5,   6,   6,  12,  -1, -11,
  -3,  -2,   3,  -4,  -5,   3, -10, -22,
  -4,   0,   6,   2,  -4,  19,  -3, -17,
// Late BlackP
   0,   0,   0,   0,   0,   0,   0,   0,
  -4,  -4,  -6,   3,  -4,   0,   2,  12,
   3,   1,   0,   0,  -5,  -9,   7,  12,
  -6,   2,   9,  -7,  -9,  -1,   0,   5,
  -9,   0,  -5,   3,   1,   2,   2,  -1,
  -9,  -2,  -2,   9,   6,  -1,  -2,  -3,
  -4,  -2,  -1,   2,   2,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
// Late BlackN
   3,  10,   3,   0,   3,   2,  -1,   3,
   2,   1,  -2,  -3,  -4,  -5,   1,   4,
   4,  -4,   7,  -3,  -3,   4,  -4,  -1,
   4,  -2,  -9,   2,  -1,  -4,  -4,   3,
   2, -12,  -4,  -3,   3,  -5, -15,  -4,
   0,  -1,   1,   2,  -1,  -1,  -3,   1,
   2,   2,   1,  -2,  -2,   0,   1,   2,
   4,   1,   1,   0,   2,   0,   1,   2,
// Late BlackB
   3,   0,  14,  -2,   1,  -4,   0,   2,
   4,  17,  -2,  -3,  -6,  -1,   4,   3,
   3,  -3,  -4,  -7, -14,  -2,   2,  -2,
  -1,  -1,  -4,  -1,  -5,   0,   1,   2,
  -1, -13,  -2,  -3,  -2,  -2,  -3,   1,
  -3,   0,   1,   1,   1,  -3,  -2,  -4,
   0,  -2,  -1,   0,   2,   0,   4,   0,
   0,   1,   1,   1,   0,  -1,  -1,   0,
// Late BlackR
  -2,  -2, -10,   0,   2,  -4,  -8,  19,
  -6,   0,  -3,  -1,   0,   4,   1,   2,
  -2,  -2,  -2,  -3,   2,   1,  -2,   0,
  -5,  -4,  -5,  -6,  -3,  -5,  -3,   0,
  -4,   0,  -1,  -2,   1,  -1,  -2,   1,
  -2,  -1,  -2,  -1,   3,  -1,  -2,   0,
  -2,  -8,  -5,  -6,   0,  -3,   1,   0,
  -1,   1,   0,  -1,  -1,  -1,  -2,  -1,
// Late BlackQ
   0,   1,  -3,   4,   0,   2,   0,   0,
   2,  -4,   6, -13, -10,  -2,   0,   0,
   3,  -2,  -9, -16, -10, -16,  -4,  -2,
  10,  -4,  -5, -16, -10,  -5,  -4,  -4,
  -2,  -7,   0,  -6,  -7,  -8,  -5,  -9,
   0,  -1,  -3,  -1,  -7,  -7,  -3,  -6,
   2,   1,  -2,  -3,   0,  -5,   0,  -1,
   2,   2,   0,   0,   0,   0,  -1,  -1,
// Late BlackK
   3,   1,  -5,  -4,   6, -21,   2,  15,
   4,   4,  -4,   2,   3,  -3,   8,  19,
   2,   0,  -8,  -4,  -9, -11,   1,   9,
   3,   2,  -1,   1,   3,  -5,   6,   9,
   1,   2,  -2,  -4,  -2,  -4,  -1,   4,
   0,  -1,  -1,  -1,  -2,  -3,  -2,   1,
   0,  -1,   0,   0,   0,  -2,  -2,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
};

}  // namespace

int32_t early_piece_map(ColoredPiece cp, Square sq) {
	assert(cp >= 0);
	assert(cp < 13);
	assert(sq >= 0);
	assert(sq < 64);
    return kEarlyPieceMap[cp * 64 + sq];
}

int32_t late_piece_map(ColoredPiece cp, Square sq) {
	assert(cp >= 0);
	assert(cp < 13);
	assert(sq >= 0);
	assert(sq < 64);
    return kLatePieceMap[cp * 64 + sq];
}

}  // namespace ChessEngine