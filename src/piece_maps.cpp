#include "piece_maps.h"

#include <cassert>

namespace ChessEngine {

namespace {
const int32_t kEarlyPieceMap[13*64] = {
  // NO_COLORED_PIECE
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
// Early White P
   0,   0,   0,   0,   0,   0,   0,   0,
  43,  25,  38,  13, -10,  21, -40,-126,
 -35, -29,  10,   6,  26,  30,  21, -19,
   6,  15,   6,   3,  12,  34,  29,  18,
  -3,  -8,   2,  -4,  -1,   6,  -3,   0,
  -8,  -4,  -4,  -8,   0,   0,  17,   4,
  -7,  -2, -13, -17, -12,  16,  16,   7,
   0,   0,   0,   0,   0,   0,   0,   0,
// Early White N
  -4, -29, -10,   0,  42,  40,-111,  61,
  -5,  49,  43, -32,  61,  67,  44,  69,
  69,  59,  41, 103, 101, 109,  88,  99,
  65,  70,  63,  83,  62,  84,  64,  88,
  51,  76,  81,  55,  78,  72,  75,  46,
  40,  63,  59,  53,  71,  59,  81,  31,
  26,  34,  44,  55,  56,  58,  21,  41,
  -5,  48,  24,  30,  46,  32,  48,  14,
// Early White B
  93,  28, -25,  47, -16,   2, -12,  79,
  25,  75,  73,  -4,  37,  72,  47,  26,
  40,  67,  51,  85,  99, 110,  80,  66,
  55,  53,  72,  62,  86,  74,  58,  49,
  51,  66,  50,  75,  70,  59,  45,  53,
  49,  60,  61,  58,  69,  45,  59,  51,
  50,  68,  68,  52,  52,  66,  61,  62,
  60,  67,  61,  14,  29,  46,  56,  36,
// Early White R
  62, -35,  49,  95,  71, -30,  68,  92,
  37,  51,  78,  83,  92,  96, 129,  91,
  35,  53,  42,  50, 103, 127, 110,  83,
 -12,   1,  29,  30,  32,  51,  80,  59,
   5,  13,  12,  17,  28,  27,  55,  32,
  -1,  11,  18,  18,  28,  38,  84,  34,
  -1,   8,  19,  18,  15,  31,  34,   6,
  19,  25,  26,  32,  42,  33,  16,  32,
// Early White Q
 122, 100, 112, 131, 107, 252, 196, 167,
  73,  86, 102,  77,  92, 119, 104, 164,
  87,  67,  82,  94, 123, 202, 133, 143,
  61,  68,  84,  73,  88,  94,  93,  89,
  74,  74,  68,  63,  74,  63,  80, 109,
  71,  78,  72,  72,  79,  79, 103, 107,
  68,  83,  90,  89,  92, 108, 102,  83,
  61,  75,  81,  86,  83,  70,  66,  80,
// Early White K
-118, 119, -10,  63,-153,-107, -58,-154,
 234, -70,-146,-149,-174,-103, -76,-237,
  30,  25,-102,-106, -93,  14,   9, -34,
 -58,  30,-189,-196,-202,-129,-100,-195,
 -97, -30,-143,-134, -79,-103,-155,-142,
   4,  -2, -72, -77, -67, -90, -30, -45,
  63,  24, -22, -32, -23,  -5,  42,  50,
   6,  26,  -6, -36,   8, -26,  13,  17,
// Early BlackP
   0,   0,   0,   0,   0,   0,   0,   0,
  13,  11,  13,  17,   8, -25, -27, -16,
  13,  11,   5,   4,  -6,   8, -26, -14,
  12,  10,  -1,   6,   4,  -4,  11,  -3,
  -9,  -7,  -5,  -5, -18, -37, -27, -17,
  34,  11,  -6, -10, -10, -42, -29,  22,
-102,  -6, -33,  -6, -81, -66, 133, 129,
   0,   0,   0,   0,   0,   0,   0,   0,
// Early BlackN
 -12, -47, -25, -27, -49, -40, -51, -15,
 -32, -33, -49, -54, -60, -68, -63, -51,
 -36, -61, -55, -64, -71, -58, -85, -39,
 -54, -69, -71, -65, -76, -85, -69, -54,
 -50, -62, -65, -71, -60, -92, -64, -87,
 -25, -60, -54, -75, -78, -90, -88, -81,
 -13, -27, -36, -13, -72, -90,   6, -66,
  12,  79,  15,  -7, -39,   2,  52, -35,
// Early BlackB
 -33, -61, -47, -44, -30, -48, -43, -41,
 -53, -57, -61, -38, -56, -77, -68, -62,
 -43, -55, -45, -55, -45, -54, -63, -59,
 -48, -46, -52, -59, -70, -51, -54, -46,
 -24, -58, -66, -78, -71, -82, -52, -35,
 -50, -44, -45, -68, -78,-100, -93, -63,
 -33, -58, -25, -45, -57, -52, -39,   0,
 -98,  -3,  22,  -2,  36,  -1, -95, -69,
// Early BlackR
 -15, -19, -19, -30, -38, -33, -12, -31,
   9, -17, -14, -23, -20, -43, -58, -14,
   2,  -6,   2,  -6, -23, -21, -77, -32,
  14,   7, -13, -27, -38, -15, -52, -22,
   8, -20, -18, -51, -73, -72, -57, -50,
 -24, -48, -60, -47, -77, -76,-125,-100,
 -42, -39, -69, -80, -87, -90, -80,-126,
 -62, -32, -18,  24, -77, -34, -89,-104,
// Early BlackQ
 -64, -73, -81, -86, -85, -58, -91, -70,
 -73, -82, -91, -73, -88,-108,-104,-115,
 -82, -83, -67, -61, -59, -68,-105, -99,
 -79, -85, -62, -63, -86, -79, -91, -92,
 -81, -79, -99, -87, -80,-111, -80,-104,
 -67, -84, -69, -93,-108,-119,-130,-148,
 -83, -66, -64, -23, -46,-126, -72,-150,
 -96, -61,-145, -64, -73, -76, -50,-150,
// Early BlackK
 -19, -17,  11,  49,  -8,  34,  -8,  -9,
 -67, -38,  17,  31,  21,   8, -35, -39,
  -9,  16, 108,  57,  81,  88,  65,  32,
 195, 143,  88,  46,  38, 172, 141, 178,
 215,  92, 141,  71,  14, 106,  80, 105,
  58, 272,  41,  52,  55,  57,  23, 113,
  61,  17,  57, 130, 158,  72, 122, 263,
-143, -32, -70,-102,-139,-130,-323, 154,
};

const int32_t kLatePieceMap[13*64] = {
  // NO_COLORED_PIECE
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,
// Late White P
   0,   0,   0,   0,   0,   0,   0,   0,
  81,  81,  77,  40,  15,   7,  54, 114,
  82,  64,  46,  25,   8,  33,  29,  48,
  44,  34,  34,  23,  25,  20,  18,  26,
  27,  27,  19,  27,  28,  24,  24,  19,
  23,  24,  25,  29,  33,  32,  21,  13,
  27,  27,  31,  16,  42,  29,  28,  16,
   0,   0,   0,   0,   0,   0,   0,   0,
// Late White N
  27,  67,  42,  81,  68,  33,  51, -24,
  81,  82,  67, 119,  81,  68,  55,  61,
  57,  66,  80,  52,  56,  59,  62,  43,
  60,  70,  71,  72,  71,  79,  89,  61,
  78,  65,  81,  75,  68,  69,  66,  81,
  57,  64,  56,  85,  80,  57,  33,  84,
  58,  71,  65,  64,  54,  65,  93,  65,
  61,  44,  75,  70,  65,  76,  41,  43,
// Late White B
  46,  66,  89, 109,  81,  77,  52,  62,
  83,  61,  64,  75,  76,  64,  73,  69,
  84,  82,  76,  62,  59,  73,  64,  83,
  88,  91,  75,  75,  74,  67,  89,  74,
  74,  72,  76,  67,  66,  70,  79,  62,
  69,  72,  78,  76,  74,  77,  62,  71,
  57,  55,  69,  71,  70,  67,  68,  51,
  52,  68,  60,  85,  83,  74,  64,  66,
// Late White R
 158, 187, 164, 148, 152, 175, 153, 143,
 171, 171, 162, 158, 153, 155, 144, 147,
 164, 162, 165, 147, 139, 141, 153, 140,
 177, 173, 168, 156, 157, 162, 144, 146,
 171, 177, 177, 172, 167, 173, 170, 167,
 178, 180, 168, 168, 156, 159, 145, 149,
 172, 172, 169, 164, 164, 154, 168, 164,
 163, 166, 172, 163, 158, 164, 173, 144,
// Late White Q
 398, 464, 479, 443, 518, 409, 432, 398,
 471, 458, 485, 501, 511, 539, 449, 466,
 437, 512, 487, 479, 511, 462, 535, 471,
 479, 503, 475, 517, 533, 534, 533, 538,
 459, 468, 497, 531, 507, 524, 508, 479,
 445, 449, 491, 477, 476, 487, 460, 442,
 460, 447, 430, 443, 440, 420, 427, 470,
 457, 442, 447, 428, 446, 436, 434, 414,
// Late White K
 -48, -65, -32, -31,  36,  -6,  29, -27,
 -78,   0,  43,  45,  48,  56,  58,   8,
   6,  25,  49,  56,  51,  48,  46,  -5,
  -9,  15,  60,  40,  48,  48,  31,  13,
 -13,  -1,  38,  40,  23,  34,  16,  -7,
 -27,   5,  25,  33,  31,  40,   9,  -4,
 -34, -15,  12,   6,   6,   6, -13, -33,
 -18, -11,   0,   8,   0,  22,  -8, -18,
// Late BlackP
   0,   0,   0,   0,   0,   0,   0,   0,
 -30, -29, -30, -24, -30, -26, -26, -13,
 -22, -24, -24, -26, -28, -33, -18, -13,
 -30, -23, -14, -29, -30, -24, -26, -19,
 -36, -25, -26, -21, -23, -19, -22, -27,
 -63, -51, -42, -16, -25, -31, -41, -54,
 -51, -73, -60, -36,   7, -29,-109, -95,
   0,   0,   0,   0,   0,   0,   0,   0,
// Late BlackN
 -54, -42, -63, -79, -64, -68, -57, -46,
 -62, -67, -57, -61, -62, -69, -61, -63,
 -65, -57, -62, -78, -77, -66, -54, -78,
 -70, -69, -85, -74, -74, -79, -71, -67,
 -65, -74, -73, -75, -70, -74, -82, -87,
 -84, -57, -72, -64, -68, -72, -61, -24,
 -64, -68, -73, -78, -67, -46, -68, -22,
 -16, -86, -62, -65, -42, -59, -46,  57,
// Late BlackB
 -61, -66, -61, -75, -69, -77, -70, -69,
 -61, -53, -73, -73, -74, -59, -70, -45,
 -66, -83, -83, -81, -87, -75, -59, -78,
 -79, -80, -86, -79, -81, -77, -71, -67,
 -87, -93, -76, -75, -79, -74, -78, -77,
 -79, -80, -79, -65, -65, -80, -79, -79,
 -78, -82, -87, -68, -54, -69, -60, -85,
 -49, -83, -71, -74, -98, -82, -69, -65,
// Late BlackR
-167,-167,-174,-165,-159,-165,-177,-142,
-177,-164,-171,-165,-163,-150,-144,-161,
-173,-174,-178,-173,-162,-161,-150,-159,
-192,-184,-179,-176,-164,-185,-160,-159,
-178,-168,-166,-162,-143,-149,-158,-150,
-162,-157,-155,-157,-144,-148,-139,-139,
-164,-178,-167,-168,-149,-153,-151,-135,
-153,-156,-163,-178,-148,-160,-165,-148,
// Late BlackQ
-439,-435,-441,-434,-434,-433,-428,-402,
-425,-450,-432,-474,-455,-420,-419,-437,
-418,-440,-502,-505,-516,-502,-463,-483,
-428,-480,-495,-537,-498,-498,-466,-495,
-467,-517,-447,-504,-548,-513,-547,-518,
-487,-476,-509,-508,-539,-568,-487,-488,
-446,-485,-528,-555,-545,-525,-490,-448,
-434,-462,-428,-511,-499,-478,-521,-447,
// Late BlackK
  28,   9,  -7, -16,   5, -24,   6,  16,
  41,  23, -17,  -9, -11,  -9,   9,  26,
  26, -18, -43, -27, -37, -38, -12,   7,
  10,  -6, -29, -19, -18, -49, -15,  -1,
 -13, -20, -43, -41, -35, -46, -29,   6,
 -14, -74, -36, -32, -31, -57, -47, -22,
   9, -43, -15, -15, -30, -57, -63, -46,
 103,  61,  32,  49,  34,  -5,  28,   7,
};

}  // namespace

int32_t early_piece_map(ColoredPiece cp, Square sq) {
	assert(cp >= 0);
	assert(cp < 13);
	assert(sq >= 0);
	assert(sq < 64);
    return kEarlyPieceMap[cp * 64 + sq];
}

int32_t late_piece_map(ColoredPiece cp, Square sq) {
	assert(cp >= 0);
	assert(cp < 13);
	assert(sq >= 0);
	assert(sq < 64);
    return kLatePieceMap[cp * 64 + sq];
}

}  // namespace ChessEngine